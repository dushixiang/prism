name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: ./frontend/package.json

    # 安装依赖
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm install

    # 构建前端
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    # 构建多平台二进制文件（CGO 关闭，便于跨平台）
    - name: Build binaries
      run: |
        mkdir -p dist
        
        # Linux AMD64
        GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-s -w" -o dist/prism-linux-amd64 ./cmd/serv
        
        # Linux ARM64
        GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -ldflags "-s -w" -o dist/prism-linux-arm64 ./cmd/serv
        
        # macOS AMD64
        GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-s -w" -o dist/prism-darwin-amd64 ./cmd/serv
        
        # macOS ARM64
        GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -ldflags "-s -w" -o dist/prism-darwin-arm64 ./cmd/serv
        
        # Windows AMD64
        GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-s -w" -o dist/prism-windows-amd64.exe ./cmd/serv

    # 创建压缩包
    - name: Create release archives
      run: |
        cd dist
        
        # Linux
        tar -czf prism-linux-amd64.tar.gz prism-linux-amd64
        tar -czf prism-linux-arm64.tar.gz prism-linux-arm64
        
        # macOS
        tar -czf prism-darwin-amd64.tar.gz prism-darwin-amd64
        tar -czf prism-darwin-arm64.tar.gz prism-darwin-arm64
        
        # Windows
        zip prism-windows-amd64.zip prism-windows-amd64.exe

    # 设置 Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # 登录到容器注册表
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # 提取版本信息
    - name: Extract version
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    # 构建和推送 Docker 镜像
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        labels: |
          org.opencontainers.image.title=Prism
          org.opencontainers.image.description=加密货币分析平台
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

    # 生成变更日志
    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          echo "从 CHANGELOG.md 提取变更信息"
          # 这里可以添加脚本来提取对应版本的变更信息
        else
          echo "生成基本的变更信息"
        fi
        echo "changelog=自动发布 ${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT

    # 创建 GitHub Release
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body: |
          ## 🎉 Prism ${{ steps.version.outputs.version }}
          
          ### 📥 下载
          
          - **Linux (AMD64)**: [prism-linux-amd64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/prism-linux-amd64.tar.gz)
          - **Linux (ARM64)**: [prism-linux-arm64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/prism-linux-arm64.tar.gz)
          - **macOS (AMD64)**: [prism-darwin-amd64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/prism-darwin-amd64.tar.gz)
          - **macOS (ARM64)**: [prism-darwin-arm64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/prism-darwin-arm64.tar.gz)
          - **Windows (AMD64)**: [prism-windows-amd64.zip](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/prism-windows-amd64.zip)
          
          ### 🐳 Docker 镜像
          
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          ```
          
          ### 📋 变更信息
          
          ${{ steps.changelog.outputs.changelog }}
        files: |
          dist/prism-linux-amd64.tar.gz
          dist/prism-linux-arm64.tar.gz
          dist/prism-darwin-amd64.tar.gz
          dist/prism-darwin-arm64.tar.gz
          dist/prism-windows-amd64.zip
        draft: false
        prerelease: false

